var search_data = {"index":{"searchIndex":["object","best_item()","binary_search()","binary_search_with_duplicates()","calc_fib()","change()","copy()","count_occurrences()","edit_distance()","euclidean_distance()","evaluate()","fast_count_segments()","fib_huge()","fib_last_digit()","fib_last_digit_of_sum()","fib_partial_sum()","fib_sum_of_squares()","find_candidate()","gcd()","get_change()","get_majority_element()","get_maximum_value()","get_number_of_inversions()","get_optimal_value()","largest_number()","lcm()","lcs3()","longest_common_subsequence()","max()","max_dot_product()","max_pairwise_product()","merge_and_count()","min()","min_and_max()","min_refills()","minimum_distance()","minimum_operations()","naive_count_segments()","optimal_points()","optimal_summands()","optimal_weight()","optimal_weight_items()","partition3()","pisanoperiod()","randomized_quick_sort()"],"longSearchIndex":["object","object#best_item()","object#binary_search()","object#binary_search_with_duplicates()","object#calc_fib()","object#change()","object#copy()","object#count_occurrences()","object#edit_distance()","object#euclidean_distance()","object#evaluate()","object#fast_count_segments()","object#fib_huge()","object#fib_last_digit()","object#fib_last_digit_of_sum()","object#fib_partial_sum()","object#fib_sum_of_squares()","object#find_candidate()","object#gcd()","object#get_change()","object#get_majority_element()","object#get_maximum_value()","object#get_number_of_inversions()","object#get_optimal_value()","object#largest_number()","object#lcm()","object#lcs3()","object#longest_common_subsequence()","object#max()","object#max_dot_product()","object#max_pairwise_product()","object#merge_and_count()","object#min()","object#min_and_max()","object#min_refills()","object#minimum_distance()","object#minimum_operations()","object#naive_count_segments()","object#optimal_points()","object#optimal_summands()","object#optimal_weight()","object#optimal_weight_items()","object#partition3()","object#pisanoperiod()","object#randomized_quick_sort()"],"info":[["Object","","Object.html","",""],["best_item","Object","Object.html#method-i-best_item","(weights, values)","<p>Finds the index of the item with the highest value-to-weight ratio.\n<p>This function identifies the item …\n"],["binary_search","Object","Object.html#method-i-binary_search","(item, list)","<p>Performs binary search for an item in a sorted list.\n<p>This function searches for an item in a sorted list …\n"],["binary_search_with_duplicates","Object","Object.html#method-i-binary_search_with_duplicates","(item, list)","<p>Performs binary search for an item in a sorted list with possible duplicates.\n<p>This function searches for …\n"],["calc_fib","Object","Object.html#method-i-calc_fib","(n)","<p>This function computes the nth Fibonacci number using an iterative approach.\n"],["change","Object","Object.html#method-i-change","(amount)","<p>Computes the minimum number of coins needed to make up a given amount. This method calculates the minimum …\n"],["copy","Object","Object.html#method-i-copy","(a, b, l, r)","<p>Copies elements from one array to another within a specified range.\n"],["count_occurrences","Object","Object.html#method-i-count_occurrences","(nums, target)","<p>Counts the number of occurrences of a specific element in an array.\n"],["edit_distance","Object","Object.html#method-i-edit_distance","(a, b)","<p>Computes the edit distance between two strings. The edit distance between two strings is the minimum …\n"],["euclidean_distance","Object","Object.html#method-i-euclidean_distance","(p1, p2)","<p>Calculates the Euclidean distance between two points.\n"],["evaluate","Object","Object.html#method-i-evaluate","(a, op, b)","<p>Evaluates the result of applying an operation to two numbers.\n"],["fast_count_segments","Object","Object.html#method-i-fast_count_segments","(segments, points)","<p>Counts the number of segments that contain each of the given points.\n<p>The algorithm uses an event-based …\n"],["fib_huge","Object","Object.html#method-i-fib_huge","(n, m)","<p>Calculates the nth Fibonacci number modulo m.\n<p>This function uses the Pisano period to efficiently compute …\n"],["fib_last_digit","Object","Object.html#method-i-fib_last_digit","(n)","<p>Calculates the last digit of the nth Fibonacci number.\n<p>This function computes the last digit of the nth …\n"],["fib_last_digit_of_sum","Object","Object.html#method-i-fib_last_digit_of_sum","(n)","<p>Calculates the last digit of the sum of Fibonacci numbers up to the nth number.\n<p>This function uses the …\n"],["fib_partial_sum","Object","Object.html#method-i-fib_partial_sum","(m, n)","<p>Calculates the last digit of the sum of Fibonacci numbers in a given range.\n<p>This function uses the Pisano …\n"],["fib_sum_of_squares","Object","Object.html#method-i-fib_sum_of_squares","(n)",""],["find_candidate","Object","Object.html#method-i-find_candidate","(nums)","<p>This algorithm identifies a potential majority element by keeping a count that is incremented or decremented …\n"],["gcd","Object","Object.html#method-i-gcd","(a, b)","<p>Calculates the greatest common divisor (GCD) of two numbers using the Euclidean algorithm.\n"],["get_change","Object","Object.html#method-i-get_change","(n)","<p>Calculates the minimum number of coins needed to make change for a given amount.\n"],["get_majority_element","Object","Object.html#method-i-get_majority_element","(nums)","<p>Finds the majority element in an array if it exists.\n<p>A majority element is an element that appears more …\n"],["get_maximum_value","Object","Object.html#method-i-get_maximum_value","(numbers, operations)","<p>Computes the maximum value of an arithmetic expression given a list of numbers and operations. Utilizes …\n"],["get_number_of_inversions","Object","Object.html#method-i-get_number_of_inversions","(a, b, left, right)","<p>Computes the total number of inversions in an array using merge sort.\n"],["get_optimal_value","Object","Object.html#method-i-get_optimal_value","(capacity, weights, values)","<p>Computes the maximum value that can be obtained with a given knapsack capacity.\n<p>This function solves the …\n"],["largest_number","Object","Object.html#method-i-largest_number","(a)","<p>Forms the largest number possible by concatenating given numbers.\n<p>This function takes an array of digits …\n"],["lcm","Object","Object.html#method-i-lcm","(a, b)","<p>Calculates the least common multiple (LCM) of two numbers.\n<p>This function computes the LCM of two integers …\n"],["lcs3","Object","Object.html#method-i-lcs3","(arr1, arr2, arr3)","<p>Computes the length of the longest common subsequence among three arrays using dynamic programming.\n"],["longest_common_subsequence","Object","Object.html#method-i-longest_common_subsequence","(arr1, arr2)","<p>Computes the length of the longest common subsequence (LCS) between two sequences.\n<p>The longest common …\n"],["max","Object","Object.html#method-i-max","(a, b)","<p>Utility function to find the maximum of two values.\n"],["max_dot_product","Object","Object.html#method-i-max_dot_product","(a, b)","<p>Calculates the maximum dot product of two arrays.\n<p>This function computes the maximum dot product by sorting …\n"],["max_pairwise_product","Object","Object.html#method-i-max_pairwise_product","(a)","<p>Calculates the maximum pairwise product of an array.\n"],["merge_and_count","Object","Object.html#method-i-merge_and_count","(a, b, left, mid, right)","<p>Merges two sorted subarrays and counts the number of inversions.\n"],["min","Object","Object.html#method-i-min","(a, b)","<p>Utility function to find the minimum of two values.\n"],["min_and_max","Object","Object.html#method-i-min_and_max","(i, j, mmin, mmax, operations)","<p>Fills the DP table with minimum and maximum values for subexpressions\n"],["min_refills","Object","Object.html#method-i-min_refills","(d, m, stops)","<p>Calculates the minimum number of refills required to travel a distance with a given range and stops. …\n"],["minimum_distance","Object","Object.html#method-i-minimum_distance","(points)","<p>Finds the minimum distance between any two points in a given set of points.\n"],["minimum_operations","Object","Object.html#method-i-minimum_operations","(n)","<p>Finds the minimum sequence of operations to reach a number ‘n` starting from 1.\n<p>The function computes …\n"],["naive_count_segments","Object","Object.html#method-i-naive_count_segments","(segments, points)","<p>Naive approach to improve upon\n"],["optimal_points","Object","Object.html#method-i-optimal_points","(segments)","<p>Determines the optimal points that cover all given segments.\n<p>This function computes the minimum number …\n"],["optimal_summands","Object","Object.html#method-i-optimal_summands","(n)","<p>Calculates the optimal summands that add up to a given number.\n<p>This function finds the maximum number …\n"],["optimal_weight","Object","Object.html#method-i-optimal_weight","(capacity, weights)","<p>Solves the knapsack without replacement problem\n"],["optimal_weight_items","Object","Object.html#method-i-optimal_weight_items","(capacity, weights)",""],["partition3","Object","Object.html#method-i-partition3","(a, l, r)","<p>Partitions an array into three parts based on a pivot element.\n<p>This method partitions the array ‘a` between …\n"],["pisanoPeriod","Object","Object.html#method-i-pisanoPeriod","(m)","<p>Calculates the Pisano period for a given modulus.\n<p>The Pisano period is the length of the cycle of Fibonacci …\n"],["randomized_quick_sort","Object","Object.html#method-i-randomized_quick_sort","(a, l, r)","<p>Performs a randomized quicksort on the array.\n<p>This method recursively sorts the array ‘a` between indices …\n"]]}}