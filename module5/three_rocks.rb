# helper code to solve Coursera's three rocks game. An extension of the 2 rocks game that can be found here: https://discrete-math-puzzles.github.io/puzzles/take-the-last-stone/index.html
# There are two piles of ten rocks.
# In each turn, you must take either 3 rocks in total, 2 rocks in total, or one rock in total for the 2 piles. The player that takes the last rock wins the game. Your opponent moves first.

=begin

Here's the output generated by the code below:
  0 1 2 3 4 5 6 7 8 9 10
 0   W W W L W W W L W W
 1 W W W L W W W L W W W
 2 W W L W W W L W W W L
 3 W L W W W L W W W L W
 4 L W W W L W W W L W W
 5 W W W L W W W L W W W
 6 W W L W W W L W W W L
 7 W L W W W L W W W L W
 8 L W W W L W W W L W W
 9 W W W L W W W L W W W
10 W W L W W W L W W W L  

=end

piles = Array.new(11) { Array.new(11) }
piles[0] = [nil, :W, :W, :W]
piles[1] = [:W, :W, :W, :L]
piles[2] = [:W, :W, :L]
piles[3] = [:W, :L]

(0..10).each do |i|
  (0..10).each do |j|
    next if i == 0 && j == 0
    unless piles[i][j]
      if (j >= 1 && piles[i][j - 1] == :L) || (j >= 2 && piles[i][j - 2] == :L) || (j >= 3 && piles[i][j - 3] == :L) ||
         (i >= 1 && piles[i - 1][j] == :L) || (i >= 1 && j >= 1 && piles[i - 1][j - 1] == :L) || (i >= 1 && j >= 2 && piles[i - 1][j - 2] == :L) ||
         (i >= 2 && piles[i - 2][j] == :L) || (i >= 2 && j >= 1 && piles[i - 2][j - 1] == :L) || (i >= 3 && piles[i - 3][j] == :L)
        
        piles[i][j] = :W
      else
        piles[i][j] = :L
      end
    end
  end
end

puts "  " + (0..10).to_a.join(" ")
piles.each_with_index do |row, i|
  print " " unless i == 10
  puts i.to_s + " " + row.map { |cell| cell.nil? ? " " : cell.to_s }.join(" ")
end